name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            librsvg2-dev \
            libnotify-dev \
            libayatana-appindicator3-dev \
            libayatana-appindicator3-1 \
            pkg-config

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install openssl

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install dependencies
        run: npm ci

      - name: Build with Tauri
        env:
          RUST_BACKTRACE: 1
          PKG_CONFIG_PATH: "/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig"
        run: |
          pkg-config --list-all | grep appindicator || echo "No appindicator found"
          pkg-config --exists ayatana-appindicator-0.1 && echo "Ayatana appindicator found" || echo "Ayatana appindicator not found"
          npm run tauri build

      - name: List bundle files
        run: |
          echo "=== Bundle files for ${{ matrix.platform }} ==="
          echo "Bundle directory contents:"
          ls -la src-tauri/target/release/bundle/ || echo "Bundle directory not found"
          echo "All bundle files:"
          find src-tauri/target/release/bundle/ -type f -name "*" | head -50
          echo "=== End bundle files for ${{ matrix.platform }} ==="

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clip-prompt-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/
          if-no-files-found: error

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifacts
        run: |
          echo "=== Debugging artifacts ==="
          echo "Current directory: $(pwd)"
          echo "Artifacts directory structure:"
          find artifacts -type f -name "*" | head -50
          echo "=== End artifacts debug ==="

      - name: Clean artifacts
        run: |
          echo "=== Cleaning artifacts ==="
          find artifacts -name "control.tar.gz" -delete
          find artifacts -name "data.tar.gz" -delete
          find artifacts -name "debian-binary" -delete
          find artifacts -name "*.so" -delete
          echo "=== Cleaned artifacts ==="

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/clip-prompt-macos-latest/**/*.dmg
            artifacts/clip-prompt-macos-latest/**/*.app.tar.gz
            artifacts/clip-prompt-ubuntu-latest/**/*.deb
            artifacts/clip-prompt-ubuntu-latest/**/*.rpm
            artifacts/clip-prompt-windows-latest/**/*.msi
            artifacts/clip-prompt-windows-latest/**/*.exe
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
